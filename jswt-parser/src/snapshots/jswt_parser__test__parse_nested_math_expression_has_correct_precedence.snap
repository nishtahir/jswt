---
source: jswt-parser/src/lib.rs
expression: actual
---
Ast {
    program: Program {
        files: [
            File {
                span: Span {
                    file: "test_parse_nested_math_expression_has_correct_precedence",
                    module: "module/test_parse_nested_math_expression_has_correct_precedence",
                    start: 0,
                    end: 22,
                },
                source_elements: SourceElements {
                    span: Span {
                        file: "test_parse_nested_math_expression_has_correct_precedence",
                        module: "module/test_parse_nested_math_expression_has_correct_precedence",
                        start: 0,
                        end: 22,
                    },
                    source_elements: [
                        VariableDeclaration(
                            VariableDeclarationElement {
                                annotations: [],
                                export: false,
                                span: Span {
                                    file: "test_parse_nested_math_expression_has_correct_precedence",
                                    module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                    start: 0,
                                    end: 22,
                                },
                                modifier: Let(
                                    Span {
                                        file: "test_parse_nested_math_expression_has_correct_precedence",
                                        module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                        start: 0,
                                        end: 3,
                                    },
                                ),
                                name: Identifier {
                                    span: Span {
                                        file: "test_parse_nested_math_expression_has_correct_precedence",
                                        module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                        start: 4,
                                        end: 5,
                                    },
                                    value: "x",
                                },
                                expression: Additive(
                                    BinaryExpression {
                                        span: Span {
                                            file: "test_parse_nested_math_expression_has_correct_precedence",
                                            module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                            start: 8,
                                            end: 21,
                                        },
                                        left: Multiplicative(
                                            BinaryExpression {
                                                span: Span {
                                                    file: "test_parse_nested_math_expression_has_correct_precedence",
                                                    module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                                    start: 8,
                                                    end: 13,
                                                },
                                                left: Literal(
                                                    Integer(
                                                        IntegerLiteral {
                                                            span: Span {
                                                                file: "test_parse_nested_math_expression_has_correct_precedence",
                                                                module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                                                start: 8,
                                                                end: 9,
                                                            },
                                                            value: 3,
                                                            ty: Unknown,
                                                        },
                                                    ),
                                                ),
                                                op: Mult(
                                                    Span {
                                                        file: "test_parse_nested_math_expression_has_correct_precedence",
                                                        module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                                        start: 10,
                                                        end: 11,
                                                    },
                                                ),
                                                right: Literal(
                                                    Integer(
                                                        IntegerLiteral {
                                                            span: Span {
                                                                file: "test_parse_nested_math_expression_has_correct_precedence",
                                                                module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                                                start: 12,
                                                                end: 13,
                                                            },
                                                            value: 2,
                                                            ty: Unknown,
                                                        },
                                                    ),
                                                ),
                                                ty: Unknown,
                                            },
                                        ),
                                        op: Plus(
                                            Span {
                                                file: "test_parse_nested_math_expression_has_correct_precedence",
                                                module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                                start: 14,
                                                end: 15,
                                            },
                                        ),
                                        right: Multiplicative(
                                            BinaryExpression {
                                                span: Span {
                                                    file: "test_parse_nested_math_expression_has_correct_precedence",
                                                    module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                                    start: 16,
                                                    end: 21,
                                                },
                                                left: Literal(
                                                    Integer(
                                                        IntegerLiteral {
                                                            span: Span {
                                                                file: "test_parse_nested_math_expression_has_correct_precedence",
                                                                module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                                                start: 16,
                                                                end: 17,
                                                            },
                                                            value: 1,
                                                            ty: Unknown,
                                                        },
                                                    ),
                                                ),
                                                op: Mult(
                                                    Span {
                                                        file: "test_parse_nested_math_expression_has_correct_precedence",
                                                        module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                                        start: 18,
                                                        end: 19,
                                                    },
                                                ),
                                                right: Literal(
                                                    Integer(
                                                        IntegerLiteral {
                                                            span: Span {
                                                                file: "test_parse_nested_math_expression_has_correct_precedence",
                                                                module: "module/test_parse_nested_math_expression_has_correct_precedence",
                                                                start: 20,
                                                                end: 21,
                                                            },
                                                            value: 0,
                                                            ty: Unknown,
                                                        },
                                                    ),
                                                ),
                                                ty: Unknown,
                                            },
                                        ),
                                        ty: Unknown,
                                    },
                                ),
                                type_annotation: None,
                            },
                        ),
                    ],
                },
            },
        ],
    },
}
