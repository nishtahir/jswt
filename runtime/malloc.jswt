// @ts-nocheck

// import "./memory.jswt";
import "../stdlib/math.jswt"; 

const maxAddr: i32 = 65536;
let isInit:boolean = false;

function init() {
    // Setup header
    hdrSetSize(0, maxAddr - 8);
    hdrSetFree(0, true);

    // Setup footer
    hdrSetSize(maxAddr - 4, maxAddr - 8);
    hdrSetFree(maxAddr - 4, true);

    isInit = true;
}

/**
 * Grow the heap by the given number of pages
 * @param pages pages to grow the heap by
 */
function extend(pages: i32) {
    let prevFooter = maxAddr - 4;
    let nBytes = pages * 65536;

    grow(pages);

    hdrSetSize(maxAddr, nBytes - 8);
    hdrSetFree(maxAddr, true);

    maxAddr = maxAddr + nBytes;
    let footer = maxAddr - 4;
    hdrSetSize(footer, nBytes - 8);
    hdrSetFree(footer, true);

    if (hdrGetFree(prevFooter) != false) {
        let prevSize = hdrGetSize(prevFooter);
        let prevHdr = prevFooter - prevSize - 4;
        hdrSetSize(prevHdr, prevSize + nBytes);
        hdrSetSize(footer, prevSize + nBytes);
    }
}

function find(nBytes: i32): i32 {
    let pointer = 0;
    while (lessUnsigned(pointer, maxAddr)) {
        let size = hdrGetSize(pointer);
        let isFree = hdrGetFree(pointer);
        let payloadPointer = pointer + 4;

        if (isFree) {
            if (greaterUnsigned(nBytes, size)) {
                // Block is free but too small
            }
            else if (lessUnsigned(nBytes, size - 8)) {
                // Block is free but large enough to split
                // We split by allocating the new block on the left 
                // [hdr|     free         |ftr]
                // [hdr|alloc|ftr|hdr|free|ftr]

                // Write header and allocation bit
                hdrSetSize(pointer, nBytes);
                hdrSetFree(pointer, false);

                // Write footer and allocation bit
                hdrSetSize(pointer + nBytes + 4, nBytes);
                hdrSetFree(pointer + nBytes + 4, false);

                // Size of the block after allocation
                let rest = size - nBytes - 8;

                // Header of next block after split
                hdrSetSize(pointer + nBytes + 8, rest);
                hdrSetFree(pointer + nBytes + 8, true);
                // Footer of next block after split
                hdrSetSize(pointer + size + 4, rest);

                return payloadPointer;
            }
            else {
                // Block is free, but not large enough to be split into two blocks 
                // Mark header as allocated
                hdrSetFree(pointer, false);
                // Mark footer as allocated
                hdrSetFree(pointer + size + 4, false);
                return payloadPointer;
            }
        }

        // Move onto the next block
        pointer = pointer + size + 8;
    }

    // We couldn't find a free block
    return 0;
}

function malloc(size: i32): i32 {
    if (isInit == false) {
        init();
    }

    const aligned_size = align4(size);
    let pointer = find(aligned_size);
    if (pointer == 0) {
        let pages = divUnsigned(aligned_size + 65527, 65528);
        extend(pages);
        return find(aligned_size);
    }

    return pointer;
}

/**
 * Copy a chunk of memory from the source to the destination
 * @param dest destination pointer
 * @param src source pointer
 * @param bytes number of bytes to copy
 */
function memcpy(src: i32, dest: i32, bytes: i32): i32 {
    let offset = 0;

    while (lessUnsigned(offset, bytes)) {
        let data = i32Load8Unsigned(src + offset);
        i32Store8(dest + offset, data);
        offset = offset + 1;
    }
}

@inline
function hdrGetSize(pointer: i32): i32 {
    return i32Load(pointer) & 0xFFFFFFFC;
}

@inline
function hdrSetSize(pointer: i32, n: i32) {
    let size = i32Load(pointer) & 0x00000003;
    i32Store(pointer, size | n);
}

@inline
function hdrGetFree(pointer: i32): boolean {
    return i32Load(pointer) & 0x00000001;
}

@inline
function hdrSetFree(pointer: i32, isFree: boolean) {
    let alloc = i32Load(pointer) & 0xFFFFFFFE;
    i32Store(pointer, alloc | isFree);
}

@inline
function align4(value: i32): i32 {
    let temp = value + 3;
    return temp & 0xFFFFFFFC;
}